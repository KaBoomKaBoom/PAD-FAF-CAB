version: '3.9'

services:
  budgeting_service.api:
    image: andreiberco/pad-budgeting-service:1.1
    container_name: pad-budgeting-service
    ports:
      - "8087:8087"
    depends_on:
      - budgeting_postgres
    env_file:
      - ./.env
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=${BUDGETING_POSTGRES_DB};Username=${BUDGETING_POSTGRES_USER};Password=${BUDGETING_POSTGRES_PASSWORD}

  budgeting_postgres:
    image: postgres:16
    container_name: pad-budgeting-service.db
    environment:
      - POSTGRES_DB=${BUDGETING_POSTGRES_DB}
      - POSTGRES_USER=${BUDGETING_POSTGRES_USER}
      - POSTGRES_PASSWORD=${BUDGETING_POSTGRES_PASSWORD}
    ports:
      - "5437:5432"
    volumes:
      - budgeting_postgres_data:/var/lib/postgresql/data

  lost_found_service.api:
    image: andreiberco/pad-l-f-service:1.1
    container_name: pad-l-f-service
    ports:
      - "8086:8086"
    depends_on:
      - lf_postgres
    env_file:
      - ./.env
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=${LF_POSTGRES_DB};Username=${LF_POSTGRES_USER};Password=${LF_POSTGRES_PASSWORD}

  lf_postgres:
    image: postgres:16
    container_name: pad-l-f-service.db
    environment:
      - POSTGRES_DB=${LF_POSTGRES_DB}
      - POSTGRES_USER=${LF_POSTGRES_USER}
      - POSTGRES_PASSWORD=${LF_POSTGRES_PASSWORD}
    ports:
      - "5436:5432"
    volumes:
      - lf_postgres_data:/var/lib/postgresql/data

  cab_booking_service.api:
    container_name: cab_booking_backend
    image: 'victorrevenco/pad_cab_booking_service:1.0.0'
    build:
      context: .
    restart: always
    depends_on:
      cb_postgres:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: ${CAB_BOOKING_SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${CAB_BOOKING_SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${CAB_BOOKING_SPRING_DATASOURCE_PASSWORD}
    env_file:
      - ./.env
    ports:
      - "8084:8084"
  
  cb_postgres:
    container_name: cab_booking_db
    image: 'postgres:16-alpine'
    ports:
      - "5434:5432"
    volumes:
      - cb_postgres_data:/var/lib/postgresql/data
    restart: always
    environment:
      POSTGRES_DB: ${CAB_BOOKING_POSTGRES_DB}
      POSTGRES_USER: ${CAB_BOOKING_POSTGRES_USER}
      POSTGRES_PASSWORD: ${CAB_BOOKING_POSTGRES_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  checkin_service.api:
    container_name: checkin_backend
    image: 'victorrevenco/pad_check-in_service:1.0.0'
    build:
      context: .
    restart: always
    depends_on:
      ci_postgres:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: ${CHECKIN_SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${CHECKIN_SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${CHECKIN_SPRING_DATASOURCE_PASSWORD}
    env_file:
      - ./.env
    ports:
    - "8085:8085"

  ci_postgres:
    container_name: checkin_db
    image: 'postgres:16-alpine'
    ports:
      - "5435:5432"
    volumes:
      - ci_postgres_data:/var/lib/postgresql/data
    restart: always
    environment:
      POSTGRES_DB: ${CHECKIN_POSTGRES_DB}
      POSTGRES_USER: ${CHECKIN_POSTGRES_USER}
      POSTGRES_PASSWORD: ${CHECKIN_POSTGRES_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  budgeting_postgres_data:
  lf_postgres_data:
  cb_postgres_data:
  ci_postgres_data:

#Same goes the next microservices and data bases