services:
  budgeting_service.api:
    image: andreiberco/pad-budgeting-service:1.1
    platform: linux/amd64
    container_name: pad-budgeting-service
    ports:
      - "8087:8087"
    depends_on:
      - budgeting_postgres
    env_file:
      - ./.env
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=${BUDGETING_POSTGRES_DB};Username=${BUDGETING_POSTGRES_USER};Password=${BUDGETING_POSTGRES_PASSWORD}

  budgeting_postgres:
    image: postgres:16
    platform: linux/amd64
    container_name: pad-budgeting-service.db
    environment:
      - POSTGRES_DB=${BUDGETING_POSTGRES_DB}
      - POSTGRES_USER=${BUDGETING_POSTGRES_USER}
      - POSTGRES_PASSWORD=${BUDGETING_POSTGRES_PASSWORD}
    ports:
      - "5437:5432"
    volumes:
      - budgeting_postgres_data:/var/lib/postgresql/data

  lost_found_service.api:
    image: andreiberco/pad-l-f-service:1.1
    platform: linux/amd64
    container_name: pad-l-f-service
    ports:
      - "8086:8086"
    depends_on:
      - lf_postgres
    env_file:
      - ./.env
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=${LF_POSTGRES_DB};Username=${LF_POSTGRES_USER};Password=${LF_POSTGRES_PASSWORD}

  lf_postgres:
    image: postgres:16
    platform: linux/amd64
    container_name: pad-l-f-service.db
    environment:
      - POSTGRES_DB=${LF_POSTGRES_DB}
      - POSTGRES_USER=${LF_POSTGRES_USER}
      - POSTGRES_PASSWORD=${LF_POSTGRES_PASSWORD}
    ports:
      - "5436:5432"
    volumes:
      - lf_postgres_data:/var/lib/postgresql/data

  um_postgres:
    image: postgres:15-alpine
    platform: linux/arm64
    ports:
      - "5434:5432"
    container_name: user_management_db
    environment:
      POSTGRES_DB: ${UM_POSTGRES_DB}
      POSTGRES_USER: ${UM_POSTGRES_USER}
      POSTGRES_PASSWORD: ${UM_POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - um_postgres_data:/var/lib/postgresql/data
    networks:
      - user_management_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${UM_POSTGRES_USER} -d ${UM_POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  user-management:
    image: "russian17/pad-user-management-service:latest"
    platform: linux/arm64
    container_name: user_management_service
    environment:
      UM_DATABASE_URL: ${UM_DATABASE_URL}
      UM_SYNC_DATABASE_URL: ${UM_SYNC_DATABASE_URL}
      UM_JWT_SECRET_KEY: ${UM_JWT_SECRET_KEY}
      UM_JWT_ALGORITHM: ${UM_JWT_ALGORITHM}
      UM_JWT_EXPIRE_MINUTES: ${UM_JWT_EXPIRE_MINUTES}
      UM_JWT_REFRESH_EXPIRE_DAYS: ${UM_JWT_REFRESH_EXPIRE_DAYS}
      UM_SECURE_COOKIES: ${UM_SECURE_COOKIES}
      UM_COOKIE_DOMAIN: $UM_{COOKIE_DOMAIN}
      UM_CORS_ORIGINS: ${UM_CORS_ORIGINS}
      UM_ENVIRONMENT: ${UM_ENVIRONMENT:-development}
      UM_DB_ECHO: ${UM_DB_ECHO:-false}
      UM_APP_PORT: ${UM_APP_PORT}
    ports:
      - "${UM_APP_PORT}:${UM_APP_PORT}"
    networks:
      - user_management_network
    depends_on:
      um_postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import requests; requests.get('http://localhost:${UM_APP_PORT}/docs', timeout=10)\""]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  ns_postgres:
    image: postgres:15-alpine
    platform: linux/amd64
    ports:
      - "5435:5432"
    container_name: notification_service_db
    environment:
      POSTGRES_DB: ${NS_POSTGRES_DB}
      POSTGRES_USER: ${NS_POSTGRES_USER}
      POSTGRES_PASSWORD: ${NS_POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - ns_postgres_data:/var/lib/postgresql/data
    networks:
      - notification_service_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${NS_POSTGRES_USER} -d ${NS_POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  notification-service:
    image: "russian17/pad-notification_service:latest"
    platform: linux/amd64
    container_name: notification_service
    environment:
      NS_DATABASE_URL: ${NS_DATABASE_URL}
      NS_SYNC_DATABASE_URL: ${NS_SYNC_DATABASE_URL}
      NS_CORS_ORIGINS: ${NS_CORS_ORIGINS}
      NS_APP_PORT: ${NS_APP_PORT}
    ports:
      - "${NS_APP_PORT}:${NS_APP_PORT}"
    networks:
      - notification_service_network
    depends_on:
      ns_postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import requests; requests.get('http://localhost:${NS_APP_PORT}/docs', timeout=10)\""]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  cab_booking_service.api:
    container_name: cab_booking_backend
    image: 'victorrevenco/pad_cab_booking_service:1.0.0'
    build:
      context: .
    restart: always
    depends_on:
      cb_postgres:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: ${CAB_BOOKING_SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${CAB_BOOKING_SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${CAB_BOOKING_SPRING_DATASOURCE_PASSWORD}
    env_file:
      - ./.env
    ports:
      - "8084:8084"

  cb_postgres:
    container_name: cab_booking_db
    image: 'postgres:16-alpine'
    ports:
      - "5434:5432"
    volumes:
      - cb_postgres_data:/var/lib/postgresql/data
    restart: always
    environment:
      POSTGRES_DB: ${CAB_BOOKING_POSTGRES_DB}
      POSTGRES_USER: ${CAB_BOOKING_POSTGRES_USER}
      POSTGRES_PASSWORD: ${CAB_BOOKING_POSTGRES_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  checkin_service.api:
    container_name: checkin_backend
    image: 'victorrevenco/pad_check-in_service:1.0.0'
    build:
      context: .
    restart: always
    depends_on:
      ci_postgres:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: ${CHECKIN_SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${CHECKIN_SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${CHECKIN_SPRING_DATASOURCE_PASSWORD}
    env_file:
      - ./.env
    ports:
    - "8085:8085"

  ci_postgres:
    container_name: checkin_db
    image: 'postgres:16-alpine'
    ports:
      - "5435:5432"
    volumes:
      - ci_postgres_data:/var/lib/postgresql/data
    restart: always
    environment:
      POSTGRES_DB: ${CHECKIN_POSTGRES_DB}
      POSTGRES_USER: ${CHECKIN_POSTGRES_USER}
      POSTGRES_PASSWORD: ${CHECKIN_POSTGRES_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  budgeting_postgres_data:
  lf_postgres_data:
  cb_postgres_data:
  ci_postgres_data:
  um_postgres_data:
  ns_postgres_data:

networks:
  user_management_network:
  notification_service_network:

#Same goes the next microservices and data bases